#Problem 138:
#Consider the isosceles triangle with base length, b = 16, and legs, L = 17.
#By using the Pythagorean theorem it can be seen that the height of the triangle, h = √(172 − 82) = 15, which is one #less than the base length.
#With b = 272 and L = 305, we get h = 273, which is one more than the base length, and this is the second smallest #isosceles triangle with the property that h = b ± 1.
#Find ∑ L for the twelve smallest isosceles triangles for which h = b ± 1 and b, L are positive integers.

import math
import sympy as sp

#The bruteforce method is inefficient in this case.
#We can observe a pattern in the numbers that are generated by the function
#pythaTri().
#The 'base' of the triangle in this case is connected to the Fibonacci Series
#The Fibonacci Series contains the numbers - 1,1,2,3,5,8,13,21,34,55,89
#The interesting ovservation is that the difference between the squares of
#adjacent numbers in the Fibonacci Series is equal to the 'base' value, that is 
#generated by the function pythaTri().

#Fibonacci Series : 1,1,2,3,5,8,13,21,34,55,89
#(5**2) - (3**2) = 16
#(21**2) - (13**2) = 272
#(89**2) - (55**2) = 4896 

#The output generated by pythaTri(), for the first three cases is:
#17 16 15.0
#305 272 273.0
#5473 4896 4895.0
#Therefore, the value of 'base' is these three cases is the same as that generated
#by the Fibonacci Series Pattern.

def pythaTri():
    numma = 10000
    for l in range(1,numma):
        for base in range(1,numma):
            var = (l**2)-((base*0.5)**2)
            if(var > 0):
                ht = math.sqrt(var)
                if(ht.is_integer()):
                    if(abs(ht-base) == 1):
                        print l,base, ht

def main():
    fibo_var = 39
    
    arr_fibo = []
    for i in range(1,fibo_var):
        arr_fibo.append(sp.fibonacci(i))
        
    #base will be a number in arr_fibo
    #ht will be a number which is +- 1 of base
    #(L**2) = (ht**2) + ((base*0.5)**2)

    #print arr_fibo
    
    #Calculate the difference betweeen the squares of adjacent numbers
    arr_base = []
    for i in range(1,len(arr_fibo)):
        temp = ((arr_fibo[i]**2) - (arr_fibo[i-1]**2))
        arr_base.append(temp)
        
    #Remove zeros from the array
    for i in range(0,len(arr_base)-1):
        if(arr_base[i] == 0):
            arr_base.remove(0)
            
    summa = 0  
    for i in range(0,len(arr_base)):
        ht = arr_base[i] + 1
        base = arr_base[i]
        
        var = math.sqrt(((base*0.5)**2) + (ht**2))
        if(var.is_integer()):
            #print int(var) 
            summa += int(var)  
        ####################    
        ht = arr_base[i] - 1
        base = arr_base[i]
        
        var = math.sqrt(((base*0.5)**2) + (ht**2))
        if(var.is_integer()):
            #print int(var)
            summa += int(var)
            
    print summa
            
main()
